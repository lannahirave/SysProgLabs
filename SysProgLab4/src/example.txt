Keyword - public
Keyword - void
Identifier - MethodOrClassOrOtherWithParsableHelp
Delimiter - (
Keyword - string
Identifier - firstParam
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - using
Identifier - System
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Collections
Operator - .
Identifier - Generic
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Dynamic
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Linq
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Net
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Threading
Operator - .
Identifier - Tasks
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - IO
Delimiter - ;
Keyword - using
Identifier - System
Operator - .
Identifier - Data
Operator - .
Identifier - Entity
Delimiter - ;
Keyword - namespace
Identifier - Learning
Operator - .
Identifier - CSharp
Delimiter - {
Keyword - public
Keyword - class
Identifier - LearnCSharp
Delimiter - {
Keyword - public
Keyword - static
Keyword - void
Identifier - Syntax
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Hello World"
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Integer: "
Operator - +
NumberLiteral - 10
Operator - +
StringLiteral - " Double: "
Operator - +
NumberLiteral - 3.14
Operator - +
StringLiteral - " Boolean: "
Operator - +
Keyword - true
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - Write
Delimiter - (
StringLiteral - "Hello "
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - Write
Delimiter - (
StringLiteral - "World"
Delimiter - )
Delimiter - ;
Keyword - sbyte
Identifier - fooSbyte
Operator - =
NumberLiteral - 100
Delimiter - ;
Keyword - byte
Identifier - fooByte
Operator - =
NumberLiteral - 100
Delimiter - ;
Keyword - short
Identifier - fooShort
Operator - =
NumberLiteral - 10000
Delimiter - ;
Keyword - ushort
Identifier - fooUshort
Operator - =
NumberLiteral - 10000
Delimiter - ;
Keyword - in
Identifier - t
Identifier - fooInt
Operator - =
NumberLiteral - 1
Delimiter - ;
Keyword - uint
Identifier - fooUint
Operator - =
NumberLiteral - 1
Delimiter - ;
Keyword - long
Identifier - fooLong
Operator - =
NumberLiteral - 100000
Identifier - L
Delimiter - ;
Keyword - ulong
Identifier - fooUlong
Operator - =
NumberLiteral - 100000
Identifier - L
Delimiter - ;
Keyword - do
Identifier - uble
Identifier - fooDouble
Operator - =
NumberLiteral - 123.4
Delimiter - ;
Keyword - float
Identifier - fooFloat
Operator - =
NumberLiteral - 234.5
Identifier - f
Delimiter - ;
Keyword - decimal
Identifier - fooDecimal
Operator - =
NumberLiteral - 150.3
Identifier - m
Delimiter - ;
Keyword - bool
Identifier - fooBoolean
Operator - =
Keyword - true
Delimiter - ;
Keyword - char
Identifier - fooChar
Operator - =
CharLiteral - 'A'
Delimiter - ;
Keyword - string
Identifier - fooString
Operator - =
StringLiteral - "\"escape\" quotes and add \n (new lines) and \t (tabs)"
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - fooString
Delimiter - )
Delimiter - ;
Keyword - char
Keyword - char
Identifier - FromString
Operator - =
Identifier - fooString
Operator - [
NumberLiteral - 1
Operator - ]
Delimiter - ;
Keyword - string
Operator - .
Identifier - Compare
Delimiter - (
Identifier - fooString
Operator - ,
StringLiteral - "x"
Operator - ,
Identifier - StringComparison
Operator - .
Identifier - CurrentCultureIgnoreCase
Delimiter - )
Delimiter - ;
Keyword - string
Identifier - fooFs
Operator - =
Keyword - string
Operator - .
Identifier - Format
Delimiter - (
StringLiteral - "Check Check, {0} {1}, {0} {1:0.0}"
Operator - ,
NumberLiteral - 1
Operator - ,
NumberLiteral - 2
Delimiter - )
Delimiter - ;
Identifier - DateTime
Identifier - fooDate
Operator - =
Identifier - DateTime
Operator - .
Identifier - Now
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - fooDate
Operator - .
Identifier - ToString
Delimiter - (
StringLiteral - "hh:mm, dd MMM yyyy"
Delimiter - )
Delimiter - )
Delimiter - ;
Keyword - string
Identifier - path
Operator - =
StringLiteral - "C:\\Users\\User\\Desktop"
Delimiter - ;
Keyword - string
Identifier - verbatimPath
Operator - =
RawStringLiteral - @"C:\Users\User\Desktop"
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - path
Operator - ==
Identifier - verbatimPath
Delimiter - )
Delimiter - ;
Keyword - string
Identifier - bazString
Operator - =
RawStringLiteral - @"Here's some stuff
on a new line! "
StringLiteral - "Wow!"
StringLiteral - ", the masses cried"
Delimiter - ;
Keyword - const
Keyword - in
Identifier - t
Identifier - HoursWorkPerWeek
Operator - =
NumberLiteral - 9001
Delimiter - ;
Keyword - in
Identifier - t
Operator - [
Operator - ]
Keyword - in
Identifier - tArray
Operator - =
Keyword - new
Keyword - in
Identifier - t
Operator - [
NumberLiteral - 10
Operator - ]
Delimiter - ;
Keyword - in
Identifier - t
Operator - [
Operator - ]
Identifier - y
Operator - =
Delimiter - {
NumberLiteral - 9000
Operator - ,
NumberLiteral - 1000
Operator - ,
NumberLiteral - 1337
Delimiter - }
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "intArray @ 0: "
Operator - +
Keyword - in
Identifier - tArray
Operator - [
NumberLiteral - 0
Operator - ]
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - tArray
Operator - [
NumberLiteral - 1
Operator - ]
Operator - =
NumberLiteral - 1
Delimiter - ;
Identifier - List
Operator - <
Keyword - in
Identifier - t
Operator - >
Keyword - in
Identifier - tList
Operator - =
Keyword - new
Identifier - List
Operator - <
Keyword - in
Identifier - t
Operator - >
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - List
Operator - <
Keyword - string
Operator - >
Keyword - string
Identifier - List
Operator - =
Keyword - new
Identifier - List
Operator - <
Keyword - string
Operator - >
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - List
Operator - <
Keyword - in
Identifier - t
Operator - >
Identifier - z
Operator - =
Keyword - new
Identifier - List
Operator - <
Keyword - in
Identifier - t
Operator - >
Delimiter - {
NumberLiteral - 9000
Operator - ,
NumberLiteral - 1000
Operator - ,
NumberLiteral - 1337
Delimiter - }
Delimiter - ;
Keyword - in
Identifier - tList
Operator - .
Identifier - Add
Delimiter - (
NumberLiteral - 1
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "intList at 0: "
Operator - +
Keyword - in
Identifier - tList
Operator - [
NumberLiteral - 0
Operator - ]
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "\n->Operators"
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - i1
Operator - =
NumberLiteral - 1
Operator - ,
Identifier - i2
Operator - =
NumberLiteral - 2
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - i1
Operator - +
Identifier - i2
Operator - -
Identifier - i1
Operator - *
NumberLiteral - 3
Operator - /
NumberLiteral - 7
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "11%3 = "
Operator - +
Delimiter - (
NumberLiteral - 11
Operator - %
NumberLiteral - 3
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "3 == 2? "
Operator - +
Delimiter - (
NumberLiteral - 3
Operator - ==
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "3 != 2? "
Operator - +
Delimiter - (
NumberLiteral - 3
Operator - !=
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "3 > 2? "
Operator - +
Delimiter - (
NumberLiteral - 3
Operator - >
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "3 < 2? "
Operator - +
Delimiter - (
NumberLiteral - 3
Operator - <
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "2 <= 2? "
Operator - +
Delimiter - (
NumberLiteral - 2
Operator - <
Operator - =
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "2 >= 2? "
Operator - +
Delimiter - (
NumberLiteral - 2
Operator - >
Operator - =
NumberLiteral - 2
Delimiter - )
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - i
Operator - =
NumberLiteral - 0
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "\n->Inc/Dec-rement"
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - i
Operator - ++
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Operator - ++
Identifier - i
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - i
Operator - --
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Operator - --
Identifier - i
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "\n->Control Structures"
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - j
Operator - =
NumberLiteral - 10
Delimiter - ;
Keyword - if
Delimiter - (
Identifier - j
Operator - ==
NumberLiteral - 10
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "I get printed"
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - else
Keyword - if
Delimiter - (
Identifier - j
Operator - >
NumberLiteral - 10
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "I don't"
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - else
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "I also don't"
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - t
Identifier - toCompare
Operator - =
NumberLiteral - 17
Delimiter - ;
Keyword - string
Keyword - is
Identifier - True
Operator - =
Identifier - toCompare
Operator - ==
NumberLiteral - 17
Operator - ?
StringLiteral - "True"
Operator - :
StringLiteral - "False"
Delimiter - ;
Keyword - in
Identifier - t
Identifier - fooWhile
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - while
Delimiter - (
Identifier - fooWhile
Operator - <
NumberLiteral - 100
Delimiter - )
Delimiter - {
Identifier - fooWhile
Operator - ++
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - t
Identifier - fooDoWhile
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - do
Delimiter - {
Keyword - if
Delimiter - (
Keyword - false
Delimiter - )
Keyword - continue
Delimiter - ;
Identifier - fooDoWhile
Operator - ++
Delimiter - ;
Keyword - if
Delimiter - (
Identifier - fooDoWhile
Operator - ==
NumberLiteral - 50
Delimiter - )
Keyword - break
Delimiter - ;
Delimiter - }
Keyword - while
Delimiter - (
Identifier - fooDoWhile
Operator - <
NumberLiteral - 100
Delimiter - )
Delimiter - ;
Keyword - for
Delimiter - (
Keyword - in
Identifier - t
Identifier - fooFor
Operator - =
NumberLiteral - 0
Delimiter - ;
Identifier - fooFor
Operator - <
NumberLiteral - 10
Delimiter - ;
Identifier - fooFor
Operator - ++
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - for
Identifier - each
Delimiter - (
Keyword - char
Keyword - char
Identifier - acter
Keyword - in
StringLiteral - "Hello World"
Operator - .
Identifier - ToCharArray
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - in
Identifier - t
Identifier - month
Operator - =
NumberLiteral - 3
Delimiter - ;
Keyword - string
Identifier - monthString
Delimiter - ;
Keyword - switch
Delimiter - (
Identifier - month
Delimiter - )
Delimiter - {
Keyword - case
NumberLiteral - 1
Operator - :
Identifier - monthString
Operator - =
StringLiteral - "January"
Delimiter - ;
Keyword - break
Delimiter - ;
Keyword - case
NumberLiteral - 2
Operator - :
Identifier - monthString
Operator - =
StringLiteral - "February"
Delimiter - ;
Keyword - break
Delimiter - ;
Keyword - case
NumberLiteral - 3
Operator - :
Identifier - monthString
Operator - =
StringLiteral - "March"
Delimiter - ;
Keyword - break
Delimiter - ;
Keyword - case
NumberLiteral - 6
Operator - :
Keyword - case
NumberLiteral - 7
Operator - :
Keyword - case
NumberLiteral - 8
Operator - :
Identifier - monthString
Operator - =
StringLiteral - "Summer time!!"
Delimiter - ;
Keyword - break
Delimiter - ;
Keyword - default
Operator - :
Identifier - monthString
Operator - =
StringLiteral - "Some other month"
Delimiter - ;
Keyword - break
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - t
Operator - .
Identifier - Parse
Delimiter - (
StringLiteral - "123"
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Keyword - try
Identifier - Int
Delimiter - ;
Keyword - if
Delimiter - (
Keyword - in
Identifier - t
Operator - .
Identifier - TryParse
Delimiter - (
StringLiteral - "123"
Operator - ,
Keyword - out
Keyword - try
Identifier - Int
Delimiter - )
Delimiter - )
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Keyword - try
Identifier - Int
Delimiter - )
Delimiter - ;
Keyword - bool
Identifier - result
Operator - =
Keyword - in
Identifier - t
Operator - .
Identifier - TryParse
Delimiter - (
Keyword - string
Operator - ,
Keyword - out
Identifier - var
Keyword - in
Identifier - teger
Delimiter - )
Keyword - in
Identifier - t
Operator - .
Identifier - Parse
Delimiter - (
Keyword - string
Delimiter - )
Delimiter - ;
Identifier - Convert
Operator - .
Identifier - ToString
Delimiter - (
NumberLiteral - 123
Delimiter - )
Delimiter - ;
Keyword - try
Identifier - Int
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Delimiter - ;
Keyword - long
Identifier - x
Operator - =
Delimiter - (
Keyword - in
Identifier - t
Delimiter - )
NumberLiteral - 15
Identifier - M
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - Classes
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Bicycle
Identifier - trek
Operator - =
Keyword - new
Identifier - Bicycle
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - trek
Operator - .
Identifier - SpeedUp
Delimiter - (
NumberLiteral - 3
Delimiter - )
Delimiter - ;
Identifier - trek
Operator - .
Identifier - Cadence
Operator - =
NumberLiteral - 100
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "trek info: "
Operator - +
Identifier - trek
Operator - .
Identifier - Info
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - PennyFarthing
Identifier - funbike
Operator - =
Keyword - new
Identifier - PennyFarthing
Delimiter - (
NumberLiteral - 1
Operator - ,
NumberLiteral - 10
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "funbike info: "
Operator - +
Identifier - funbike
Operator - .
Identifier - Info
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - Read
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - public
Identifier - record
Identifier - ARecord
Delimiter - (
Keyword - string
Identifier - Csharp
Delimiter - )
Delimiter - ;
Keyword - public
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Keyword - string
Operator - [
Operator - ]
Identifier - args
Delimiter - )
Delimiter - {
Identifier - OtherInterestingFeatures
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - in
Identifier - t
Identifier - MethodSignatures
Delimiter - (
Keyword - in
Identifier - t
Identifier - maxCount
Operator - ,
Keyword - in
Identifier - t
Identifier - count
Operator - =
NumberLiteral - 0
Operator - ,
Keyword - in
Identifier - t
Identifier - another
Operator - =
NumberLiteral - 3
Operator - ,
Keyword - params
Keyword - string
Operator - [
Operator - ]
Identifier - otherParams
Delimiter - )
Delimiter - {
Keyword - return
NumberLiteral - -1
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - MethodSignatures
Delimiter - (
Keyword - ref
Keyword - in
Identifier - t
Identifier - maxCount
Operator - ,
Keyword - out
Keyword - in
Identifier - t
Identifier - count
Delimiter - )
Delimiter - {
Identifier - count
Operator - =
NumberLiteral - 15
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Identifier - TValue
Identifier - SetDefault
Operator - <
Identifier - TKey
Operator - ,
Identifier - TValue
Operator - >
Delimiter - (
Identifier - IDictionary
Operator - <
Identifier - TKey
Operator - ,
Identifier - TValue
Operator - >
Identifier - dictionary
Operator - ,
Identifier - TKey
Identifier - key
Operator - ,
Identifier - TValue
Keyword - default
Identifier - Item
Delimiter - )
Delimiter - {
Identifier - TValue
Identifier - result
Delimiter - ;
Keyword - if
Delimiter - (
Operator - !
Identifier - dictionary
Operator - .
Identifier - TryGetValue
Delimiter - (
Identifier - key
Operator - ,
Keyword - out
Identifier - result
Delimiter - )
Delimiter - )
Keyword - return
Identifier - dictionary
Operator - [
Identifier - key
Operator - ]
Operator - =
Keyword - default
Identifier - Item
Delimiter - ;
Keyword - return
Identifier - result
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - IterateAndPrint
Operator - <
Identifier - T
Operator - >
Delimiter - (
Identifier - T
Identifier - toPrint
Delimiter - )
Identifier - where
Identifier - T
Operator - :
Identifier - IEnumerable
Operator - <
Keyword - in
Identifier - t
Operator - >
Delimiter - {
Keyword - for
Identifier - each
Delimiter - (
Identifier - var
Identifier - item
Keyword - in
Identifier - toPrint
Delimiter - )
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - item
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Identifier - IEnumerable
Operator - <
Keyword - in
Identifier - t
Operator - >
Identifier - YieldCounter
Delimiter - (
Keyword - in
Identifier - t
Identifier - limit
Operator - =
NumberLiteral - 10
Delimiter - )
Delimiter - {
Keyword - for
Delimiter - (
Identifier - var
Identifier - i
Operator - =
NumberLiteral - 0
Delimiter - ;
Identifier - i
Operator - <
Identifier - limit
Delimiter - ;
Identifier - i
Operator - ++
Delimiter - )
Identifier - yield
Keyword - return
Identifier - i
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - PrintYieldCounterToConsole
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - for
Identifier - each
Delimiter - (
Identifier - var
Identifier - counter
Keyword - in
Identifier - YieldCounter
Delimiter - (
Delimiter - )
Delimiter - )
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - counter
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Identifier - IEnumerable
Operator - <
Keyword - in
Identifier - t
Operator - >
Identifier - ManyYieldCounter
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - yield
Keyword - return
NumberLiteral - 0
Delimiter - ;
Identifier - yield
Keyword - return
NumberLiteral - 1
Delimiter - ;
Identifier - yield
Keyword - return
NumberLiteral - 2
Delimiter - ;
Identifier - yield
Keyword - return
NumberLiteral - 3
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Identifier - IEnumerable
Operator - <
Keyword - in
Identifier - t
Operator - >
Identifier - YieldCounterWithBreak
Delimiter - (
Keyword - in
Identifier - t
Identifier - limit
Operator - =
NumberLiteral - 10
Delimiter - )
Delimiter - {
Keyword - for
Delimiter - (
Identifier - var
Identifier - i
Operator - =
NumberLiteral - 0
Delimiter - ;
Identifier - i
Operator - <
Identifier - limit
Delimiter - ;
Identifier - i
Operator - ++
Delimiter - )
Delimiter - {
Keyword - if
Delimiter - (
Identifier - i
Operator - >
Identifier - limit
Operator - /
NumberLiteral - 2
Delimiter - )
Identifier - yield
Keyword - break
Delimiter - ;
Identifier - yield
Keyword - return
Identifier - i
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - OtherInterestingFeatures
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - MethodSignatures
Delimiter - (
NumberLiteral - 3
Operator - ,
NumberLiteral - 1
Operator - ,
NumberLiteral - 3
Operator - ,
StringLiteral - "Some"
Operator - ,
StringLiteral - "Extra"
Operator - ,
StringLiteral - "Strings"
Delimiter - )
Delimiter - ;
Identifier - MethodSignatures
Delimiter - (
NumberLiteral - 3
Operator - ,
Identifier - another
Operator - :
NumberLiteral - 3
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - maxCount
Operator - =
NumberLiteral - 0
Operator - ,
Identifier - count
Delimiter - ;
Identifier - MethodSignatures
Delimiter - (
Keyword - ref
Identifier - maxCount
Operator - ,
Keyword - out
Identifier - count
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - i
Operator - =
NumberLiteral - 3
Delimiter - ;
Identifier - i
Operator - .
Identifier - Print
Delimiter - (
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Operator - ?
Keyword - null
Identifier - able
Operator - =
Keyword - null
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Nullable variable: "
Operator - +
Keyword - null
Identifier - able
Delimiter - )
Delimiter - ;
Keyword - bool
Identifier - hasValue
Operator - =
Keyword - null
Identifier - able
Operator - .
Identifier - HasValue
Delimiter - ;
Keyword - in
Identifier - t
Identifier - notNullable
Operator - =
Keyword - null
Identifier - able
Operator - ?
Operator - ?
NumberLiteral - 0
Delimiter - ;
Keyword - null
Identifier - able
Operator - ?
Operator - .
Identifier - Print
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - magic
Operator - =
StringLiteral - "magic is a string, at compile time, so you still get type safety"
Delimiter - ;
Identifier - var
Identifier - phonebook
Operator - =
Keyword - new
Identifier - Dictionary
Operator - <
Keyword - string
Operator - ,
Keyword - string
Operator - >
Delimiter - (
Delimiter - )
Delimiter - {
Delimiter - {
StringLiteral - "Sarah"
Operator - ,
StringLiteral - "212 555 5555"
Delimiter - }
Delimiter - }
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - SetDefault
Operator - <
Keyword - string
Operator - ,
Keyword - string
Operator - >
Delimiter - (
Identifier - phonebook
Operator - ,
StringLiteral - "Shaun"
Operator - ,
StringLiteral - "No Phone"
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - SetDefault
Delimiter - (
Identifier - phonebook
Operator - ,
StringLiteral - "Sarah"
Operator - ,
StringLiteral - "No Phone"
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Func
Operator - <
Keyword - in
Identifier - t
Operator - ,
Keyword - in
Identifier - t
Operator - >
Identifier - square
Operator - =
Delimiter - (
Identifier - x
Delimiter - )
Operator - =
Operator - >
Identifier - x
Operator - *
Identifier - x
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - square
Delimiter - (
NumberLiteral - 3
Delimiter - )
Delimiter - )
Delimiter - ;
Keyword - try
Delimiter - {
Identifier - var
Identifier - funBike
Operator - =
Identifier - PennyFarthing
Operator - .
Identifier - CreateWithGears
Delimiter - (
NumberLiteral - 6
Delimiter - )
Delimiter - ;
Keyword - string
Identifier - some
Operator - =
StringLiteral - ""
Delimiter - ;
Keyword - if
Delimiter - (
Keyword - true
Delimiter - )
Identifier - some
Operator - =
Keyword - null
Delimiter - ;
Identifier - some
Operator - .
Identifier - ToLower
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - catch
Delimiter - (
Identifier - NotSupportedException
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Not so much fun now!"
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - catch
Delimiter - (
Identifier - Exception
Identifier - ex
Delimiter - )
Delimiter - {
Keyword - throw
Keyword - new
Identifier - ApplicationException
Delimiter - (
StringLiteral - "It hit the fan"
Operator - ,
Identifier - ex
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - finally
Delimiter - {
Delimiter - }
Keyword - using
Delimiter - (
Identifier - StreamWriter
Identifier - writer
Operator - =
Keyword - new
Identifier - StreamWriter
Delimiter - (
StringLiteral - "log.txt"
Delimiter - )
Delimiter - )
Delimiter - {
Identifier - writer
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Nothing suspicious here"
Delimiter - )
Delimiter - ;
Delimiter - }
Identifier - var
Identifier - words
Operator - =
Keyword - new
Identifier - List
Operator - <
Keyword - string
Operator - >
Delimiter - {
StringLiteral - "dog"
Operator - ,
StringLiteral - "cat"
Operator - ,
StringLiteral - "horse"
Operator - ,
StringLiteral - "pony"
Delimiter - }
Delimiter - ;
Identifier - Parallel
Operator - .
Identifier - ForEach
Delimiter - (
Identifier - words
Operator - ,
Keyword - new
Identifier - ParallelOptions
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - MaxDegreeOfParallelism
Operator - =
NumberLiteral - 4
Delimiter - }
Operator - ,
Identifier - word
Operator - =
Operator - >
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - word
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - )
Delimiter - ;
Identifier - dynamic
Identifier - student
Operator - =
Keyword - new
Identifier - ExpandoObject
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - student
Operator - .
Identifier - FirstName
Operator - =
StringLiteral - "First Name"
Delimiter - ;
Identifier - student
Operator - .
Identifier - Introduce
Operator - =
Keyword - new
Identifier - Func
Operator - <
Keyword - string
Operator - ,
Keyword - string
Operator - >
Delimiter - (
Delimiter - (
Keyword - in
Identifier - troduceTo
Delimiter - )
Operator - =
Operator - >
Keyword - string
Operator - .
Identifier - Format
Delimiter - (
StringLiteral - "Hey {0}, this is {1}"
Operator - ,
Identifier - student
Operator - .
Identifier - FirstName
Operator - ,
Keyword - in
Identifier - troduceTo
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - student
Operator - .
Identifier - Introduce
Delimiter - (
StringLiteral - "Beth"
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - bikes
Operator - =
Keyword - new
Identifier - List
Operator - <
Identifier - Bicycle
Operator - >
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - bikes
Operator - .
Identifier - Sort
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - bikes
Operator - .
Identifier - Sort
Delimiter - (
Delimiter - (
Identifier - b1
Operator - ,
Identifier - b2
Delimiter - )
Operator - =
Operator - >
Identifier - b1
Operator - .
Identifier - Wheels
Operator - .
Identifier - CompareTo
Delimiter - (
Identifier - b2
Operator - .
Identifier - Wheels
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - result
Operator - =
Identifier - bikes
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Wheels
Operator - >
NumberLiteral - 3
Delimiter - )
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - IsBroken
Operator - &&
Identifier - b
Operator - .
Identifier - HasTassles
Delimiter - )
Operator - .
Identifier - Select
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - sum
Operator - =
Identifier - bikes
Operator - .
Identifier - Sum
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Wheels
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - bikeSummaries
Operator - =
Identifier - bikes
Operator - .
Identifier - Select
Delimiter - (
Identifier - b
Operator - =
Operator - >
Keyword - new
Delimiter - {
Identifier - Name
Operator - =
Identifier - b
Operator - .
Identifier - Name
Operator - ,
Identifier - IsAwesome
Operator - =
Operator - !
Identifier - b
Operator - .
Identifier - IsBroken
Operator - &&
Identifier - b
Operator - .
Identifier - HasTassles
Delimiter - }
Delimiter - )
Delimiter - ;
Keyword - for
Identifier - each
Delimiter - (
Identifier - var
Identifier - bikeSummary
Keyword - in
Identifier - bikeSummaries
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - IsAwesome
Delimiter - )
Delimiter - )
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - bikeSummary
Operator - .
Identifier - Name
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - threeWheelers
Operator - =
Identifier - bikes
Operator - .
Identifier - AsParallel
Delimiter - (
Delimiter - )
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Wheels
Operator - ==
NumberLiteral - 3
Delimiter - )
Operator - .
Identifier - Select
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Name
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - db
Operator - =
Keyword - new
Identifier - BikeRepository
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - filter
Operator - =
Identifier - db
Operator - .
Identifier - Bikes
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - HasTassles
Delimiter - )
Delimiter - ;
Keyword - if
Delimiter - (
NumberLiteral - 42
Operator - >
NumberLiteral - 6
Delimiter - )
Identifier - filter
Operator - =
Identifier - filter
Operator - .
Identifier - Where
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - IsBroken
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - query
Operator - =
Identifier - filter
Operator - .
Identifier - OrderBy
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Wheels
Delimiter - )
Operator - .
Identifier - ThenBy
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Name
Delimiter - )
Operator - .
Identifier - Select
Delimiter - (
Identifier - b
Operator - =
Operator - >
Identifier - b
Operator - .
Identifier - Name
Delimiter - )
Delimiter - ;
Keyword - for
Identifier - each
Delimiter - (
Keyword - string
Identifier - bike
Keyword - in
Identifier - query
Delimiter - )
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - result
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - static
Keyword - class
Identifier - Extensions
Delimiter - {
Keyword - public
Keyword - static
Keyword - void
Identifier - Print
Delimiter - (
Keyword - this
Keyword - object
Identifier - obj
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - obj
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - DelegateTest
Delimiter - {
Keyword - public
Keyword - static
Keyword - in
Identifier - t
Identifier - count
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - public
Keyword - static
Keyword - in
Identifier - t
Identifier - Increment
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - return
Operator - ++
Identifier - count
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - delegate
Keyword - in
Identifier - t
Identifier - IncrementDelegate
Delimiter - (
Delimiter - )
Delimiter - ;
Keyword - public
Keyword - static
Keyword - event
Identifier - IncrementDelegate
Identifier - MyEvent
Delimiter - ;
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Keyword - string
Operator - [
Operator - ]
Identifier - args
Delimiter - )
Delimiter - {
Identifier - IncrementDelegate
Keyword - in
Identifier - c
Operator - =
Keyword - new
Identifier - IncrementDelegate
Delimiter - (
Identifier - Increment
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Keyword - in
Identifier - c
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - IncrementDelegate
Identifier - composedInc
Operator - =
Keyword - in
Identifier - c
Delimiter - ;
Identifier - composedInc
Operator - +=
Keyword - in
Identifier - c
Delimiter - ;
Identifier - composedInc
Operator - +=
Keyword - in
Identifier - c
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - composedInc
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - MyEvent
Operator - +=
Keyword - new
Identifier - IncrementDelegate
Delimiter - (
Identifier - Increment
Delimiter - )
Delimiter - ;
Identifier - MyEvent
Operator - +=
Keyword - new
Identifier - IncrementDelegate
Delimiter - (
Identifier - Increment
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - MyEvent
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - Bicycle
Delimiter - {
Keyword - public
Keyword - in
Identifier - t
Identifier - Cadence
Delimiter - {
Identifier - get
Delimiter - {
Keyword - return
Identifier - _cadence
Delimiter - ;
Delimiter - }
Identifier - set
Delimiter - {
Identifier - _cadence
Operator - =
Identifier - value
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - private
Keyword - in
Identifier - t
Identifier - _cadence
Delimiter - ;
Keyword - protected
Keyword - virtual
Keyword - in
Identifier - t
Identifier - Gear
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - ternal
Keyword - in
Identifier - t
Identifier - Wheels
Delimiter - {
Identifier - get
Delimiter - ;
Keyword - private
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - t
Identifier - _speed
Delimiter - ;
Keyword - public
Keyword - string
Identifier - Name
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - string
Identifier - LongName
Operator - =
Operator - >
Identifier - Name
Operator - +
StringLiteral - " "
Operator - +
Identifier - _speed
Operator - +
StringLiteral - " speed"
Delimiter - ;
Keyword - public
Keyword - enum
Identifier - BikeBrand
Delimiter - {
Identifier - AIST
Operator - ,
Identifier - BMC
Operator - ,
Identifier - Electra
Operator - =
NumberLiteral - 42
Operator - ,
Identifier - Gitane
Delimiter - }
Keyword - public
Identifier - BikeBrand
Identifier - Brand
Delimiter - ;
Operator - [
Identifier - Flags
Operator - ]
Keyword - public
Keyword - enum
Identifier - BikeAccessories
Delimiter - {
Identifier - None
Operator - =
NumberLiteral - 0
Operator - ,
Identifier - Bell
Operator - =
NumberLiteral - 1
Operator - ,
Identifier - MudGuards
Operator - =
NumberLiteral - 2
Operator - ,
Identifier - Racks
Operator - =
NumberLiteral - 4
Operator - ,
Identifier - Lights
Operator - =
NumberLiteral - 8
Operator - ,
Identifier - FullPackage
Operator - =
Identifier - Bell
Operator - |
Identifier - MudGuards
Operator - |
Identifier - Racks
Operator - |
Identifier - Lights
Delimiter - }
Keyword - public
Identifier - BikeAccessories
Identifier - Accessories
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - in
Identifier - t
Identifier - BicyclesCreated
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - readonly
Keyword - bool
Identifier - _hasCardsInSpokes
Operator - =
Keyword - false
Delimiter - ;
Keyword - public
Identifier - Bicycle
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - this
Operator - .
Identifier - Gear
Operator - =
NumberLiteral - 1
Delimiter - ;
Identifier - Cadence
Operator - =
NumberLiteral - 50
Delimiter - ;
Identifier - _speed
Operator - =
NumberLiteral - 5
Delimiter - ;
Identifier - Name
Operator - =
StringLiteral - "Bontrager"
Delimiter - ;
Identifier - Brand
Operator - =
Identifier - BikeBrand
Operator - .
Identifier - AIST
Delimiter - ;
Identifier - BicyclesCreated
Operator - ++
Delimiter - ;
Delimiter - }
Keyword - public
Identifier - Bicycle
Delimiter - (
Keyword - in
Identifier - t
Identifier - startCadence
Operator - ,
Keyword - in
Identifier - t
Identifier - startSpeed
Operator - ,
Keyword - in
Identifier - t
Identifier - startGear
Operator - ,
Keyword - string
Identifier - name
Operator - ,
Keyword - bool
Identifier - hasCardsInSpokes
Operator - ,
Identifier - BikeBrand
Identifier - brand
Delimiter - )
Operator - :
Keyword - base
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Gear
Operator - =
Identifier - startGear
Delimiter - ;
Identifier - Cadence
Operator - =
Identifier - startCadence
Delimiter - ;
Identifier - _speed
Operator - =
Identifier - startSpeed
Delimiter - ;
Identifier - Name
Operator - =
Identifier - name
Delimiter - ;
Identifier - _hasCardsInSpokes
Operator - =
Identifier - hasCardsInSpokes
Delimiter - ;
Identifier - Brand
Operator - =
Identifier - brand
Delimiter - ;
Delimiter - }
Keyword - public
Identifier - Bicycle
Delimiter - (
Keyword - in
Identifier - t
Identifier - startCadence
Operator - ,
Keyword - in
Identifier - t
Identifier - startSpeed
Operator - ,
Identifier - BikeBrand
Identifier - brand
Delimiter - )
Operator - :
Keyword - this
Delimiter - (
Identifier - startCadence
Operator - ,
Identifier - startSpeed
Operator - ,
NumberLiteral - 0
Operator - ,
StringLiteral - "big wheels"
Operator - ,
Keyword - true
Operator - ,
Identifier - brand
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - public
Keyword - void
Identifier - SpeedUp
Delimiter - (
Keyword - in
Identifier - t
Keyword - in
Identifier - crement
Operator - =
NumberLiteral - 1
Delimiter - )
Delimiter - {
Identifier - _speed
Operator - +=
Keyword - in
Identifier - crement
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - void
Identifier - SlowDown
Delimiter - (
Keyword - in
Identifier - t
Identifier - decrement
Operator - =
NumberLiteral - 1
Delimiter - )
Delimiter - {
Identifier - _speed
Operator - -=
Identifier - decrement
Delimiter - ;
Delimiter - }
Keyword - private
Keyword - bool
Identifier - _hasTassles
Delimiter - ;
Keyword - public
Keyword - bool
Identifier - HasTassles
Delimiter - {
Identifier - get
Delimiter - {
Keyword - return
Identifier - _hasTassles
Delimiter - ;
Delimiter - }
Identifier - set
Delimiter - {
Identifier - _hasTassles
Operator - =
Identifier - value
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - bool
Identifier - IsBroken
Delimiter - {
Identifier - get
Delimiter - ;
Keyword - private
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - in
Identifier - t
Identifier - FrameSize
Delimiter - {
Identifier - get
Delimiter - ;
Keyword - private
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - private
Keyword - string
Operator - [
Operator - ]
Identifier - passengers
Operator - =
Delimiter - {
StringLiteral - "chris"
Operator - ,
StringLiteral - "phil"
Operator - ,
StringLiteral - "darren"
Operator - ,
StringLiteral - "regina"
Delimiter - }
Delimiter - ;
Keyword - public
Keyword - string
Keyword - this
Operator - [
Keyword - in
Identifier - t
Identifier - i
Operator - ]
Delimiter - {
Identifier - get
Delimiter - {
Keyword - return
Identifier - passengers
Operator - [
Identifier - i
Operator - ]
Delimiter - ;
Delimiter - }
Identifier - set
Delimiter - {
Identifier - passengers
Operator - [
Identifier - i
Operator - ]
Operator - =
Identifier - value
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - virtual
Keyword - string
Identifier - Info
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - return
StringLiteral - "Gear: "
Operator - +
Identifier - Gear
Operator - +
StringLiteral - " Cadence: "
Operator - +
Identifier - Cadence
Operator - +
StringLiteral - " Speed: "
Operator - +
Identifier - _speed
Operator - +
StringLiteral - " Name: "
Operator - +
Identifier - Name
Operator - +
StringLiteral - " Cards in Spokes: "
Operator - +
Delimiter - (
Identifier - _hasCardsInSpokes
Operator - ?
StringLiteral - "yes"
Operator - :
StringLiteral - "no"
Delimiter - )
Operator - +
StringLiteral - "\n------------------------------\n"
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - bool
Identifier - DidWeCreateEnoughBicycles
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - return
Identifier - BicyclesCreated
Operator - >
NumberLiteral - 9000
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - PennyFarthing
Operator - :
Identifier - Bicycle
Delimiter - {
Keyword - public
Identifier - PennyFarthing
Delimiter - (
Keyword - in
Identifier - t
Identifier - startCadence
Operator - ,
Keyword - in
Identifier - t
Identifier - startSpeed
Delimiter - )
Operator - :
Keyword - base
Delimiter - (
Identifier - startCadence
Operator - ,
Identifier - startSpeed
Operator - ,
NumberLiteral - 0
Operator - ,
StringLiteral - "PennyFarthing"
Operator - ,
Keyword - true
Operator - ,
Identifier - BikeBrand
Operator - .
Identifier - Electra
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - protected
Keyword - override
Keyword - in
Identifier - t
Identifier - Gear
Delimiter - {
Identifier - get
Delimiter - {
Keyword - return
NumberLiteral - 0
Delimiter - ;
Delimiter - }
Identifier - set
Delimiter - {
Keyword - throw
Keyword - new
Identifier - InvalidOperationException
Delimiter - (
StringLiteral - "You can't change gears on a PennyFarthing"
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - static
Identifier - PennyFarthing
Identifier - CreateWithGears
Delimiter - (
Keyword - in
Identifier - t
Identifier - gears
Delimiter - )
Delimiter - {
Identifier - var
Identifier - penny
Operator - =
Keyword - new
Identifier - PennyFarthing
Delimiter - (
NumberLiteral - 1
Operator - ,
NumberLiteral - 1
Delimiter - )
Delimiter - ;
Identifier - penny
Operator - .
Identifier - Gear
Operator - =
Identifier - gears
Delimiter - ;
Keyword - return
Identifier - penny
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - override
Keyword - string
Identifier - Info
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - string
Identifier - result
Operator - =
StringLiteral - "PennyFarthing bicycle "
Delimiter - ;
Identifier - result
Operator - +=
Keyword - base
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Delimiter - ;
Keyword - return
Identifier - result
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - in
Identifier - terface
Identifier - IJumpable
Delimiter - {
Keyword - void
Identifier - Jump
Delimiter - (
Keyword - in
Identifier - t
Identifier - meters
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - in
Identifier - terface
Identifier - IBreakable
Delimiter - {
Keyword - bool
Identifier - Broken
Delimiter - {
Identifier - get
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - MountainBike
Operator - :
Identifier - Bicycle
Operator - ,
Identifier - IJumpable
Operator - ,
Identifier - IBreakable
Delimiter - {
Keyword - in
Identifier - t
Identifier - damage
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - public
Keyword - void
Identifier - Jump
Delimiter - (
Keyword - in
Identifier - t
Identifier - meters
Delimiter - )
Delimiter - {
Identifier - damage
Operator - +=
Identifier - meters
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - bool
Identifier - Broken
Delimiter - {
Identifier - get
Delimiter - {
Keyword - return
Identifier - damage
Operator - >
NumberLiteral - 100
Delimiter - ;
Delimiter - }
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - BikeRepository
Operator - :
Identifier - DbContext
Delimiter - {
Keyword - public
Identifier - BikeRepository
Delimiter - (
Delimiter - )
Operator - :
Keyword - base
Delimiter - (
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - public
Identifier - DbSet
Operator - <
Identifier - Bicycle
Operator - >
Identifier - Bikes
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Identifier - partial
Keyword - class
Identifier - A
Delimiter - {
Keyword - public
Keyword - static
Keyword - void
Identifier - A1
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Method A1 in class A"
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Identifier - partial
Keyword - class
Identifier - A
Delimiter - {
Keyword - public
Keyword - static
Keyword - void
Identifier - A2
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "Method A2 in class A"
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - Program
Delimiter - {
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - A
Operator - .
Identifier - A1
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - A
Operator - .
Identifier - A2
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - Rectangle
Delimiter - {
Keyword - public
Keyword - in
Identifier - t
Identifier - Length
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - in
Identifier - t
Identifier - Width
Delimiter - {
Identifier - get
Delimiter - ;
Identifier - set
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - Program
Delimiter - {
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Keyword - string
Operator - [
Operator - ]
Identifier - args
Delimiter - )
Delimiter - {
Identifier - Rectangle
Identifier - rect
Operator - =
Keyword - new
Identifier - Rectangle
Delimiter - {
Identifier - Length
Operator - =
NumberLiteral - 5
Operator - ,
Identifier - Width
Operator - =
NumberLiteral - 3
Delimiter - }
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
TemplateStringLiteral - $"The length is {rect.Length} and the width is {rect.Width}"
Delimiter - )
Delimiter - ;
Keyword - string
Identifier - username
Operator - =
StringLiteral - "User"
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
RowTemplateStringLiteral - $@"C:\Users\{username}\Desktop"
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - GlassBall
Operator - :
Identifier - IJumpable
Operator - ,
Identifier - IBreakable
Delimiter - {
Keyword - public
Keyword - in
Identifier - t
Identifier - Damage
Delimiter - {
Identifier - get
Delimiter - ;
Keyword - private
Identifier - set
Delimiter - ;
Delimiter - }
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - public
Keyword - string
Identifier - Name
Delimiter - {
Identifier - get
Delimiter - ;
Delimiter - }
Operator - =
StringLiteral - "Glass ball"
Delimiter - ;
Keyword - public
Keyword - string
Identifier - GenieName
Delimiter - {
Identifier - get
Delimiter - ;
Delimiter - }
Keyword - public
Identifier - GlassBall
Delimiter - (
Keyword - string
Identifier - genieName
Operator - =
Keyword - null
Delimiter - )
Delimiter - {
Identifier - GenieName
Operator - =
Identifier - genieName
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - void
Identifier - Jump
Delimiter - (
Keyword - in
Identifier - t
Identifier - meters
Delimiter - )
Delimiter - {
Keyword - if
Delimiter - (
Identifier - meters
Operator - <
NumberLiteral - 0
Delimiter - )
Keyword - throw
Keyword - new
Identifier - ArgumentException
Delimiter - (
StringLiteral - "Cannot jump negative amount!"
Operator - ,
Identifier - nameof
Delimiter - (
Identifier - meters
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Damage
Operator - +=
Identifier - meters
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - bool
Identifier - Broken
Operator - =
Operator - >
Identifier - Damage
Operator - >
NumberLiteral - 100
Delimiter - ;
Keyword - public
Keyword - override
Keyword - string
Identifier - ToString
Delimiter - (
Delimiter - )
Operator - =
Operator - >
TemplateStringLiteral - $"{Name}. Damage taken: {Damage}"
Delimiter - ;
Keyword - public
Keyword - string
Identifier - SummonGenie
Delimiter - (
Delimiter - )
Operator - =
Operator - >
Identifier - GenieName
Operator - ?
Operator - .
Identifier - ToUpper
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - static
Keyword - class
Identifier - MagicService
Delimiter - {
Keyword - private
Keyword - static
Keyword - bool
Identifier - LogException
Delimiter - (
Identifier - Exception
Identifier - ex
Delimiter - )
Delimiter - {
Keyword - return
Keyword - false
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - bool
Identifier - CastSpell
Delimiter - (
Keyword - string
Identifier - spell
Delimiter - )
Delimiter - {
Keyword - try
Delimiter - {
Keyword - throw
Keyword - new
Identifier - MagicServiceException
Delimiter - (
StringLiteral - "Spell failed"
Operator - ,
NumberLiteral - 42
Delimiter - )
Delimiter - ;
Keyword - return
Keyword - true
Delimiter - ;
Delimiter - }
Keyword - catch
Delimiter - (
Identifier - MagicServiceException
Identifier - ex
Delimiter - )
Identifier - when
Delimiter - (
Identifier - ex
Operator - .
Identifier - Code
Operator - ==
NumberLiteral - 42
Delimiter - )
Delimiter - {
Keyword - return
Keyword - false
Delimiter - ;
Delimiter - }
Keyword - catch
Delimiter - (
Identifier - Exception
Identifier - ex
Delimiter - )
Identifier - when
Delimiter - (
Identifier - LogException
Delimiter - (
Identifier - ex
Delimiter - )
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - return
Keyword - false
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - class
Identifier - MagicServiceException
Operator - :
Identifier - Exception
Delimiter - {
Keyword - public
Keyword - in
Identifier - t
Identifier - Code
Delimiter - {
Identifier - get
Delimiter - ;
Delimiter - }
Keyword - public
Identifier - MagicServiceException
Delimiter - (
Keyword - string
Identifier - message
Operator - ,
Keyword - in
Identifier - t
Identifier - code
Delimiter - )
Operator - :
Keyword - base
Delimiter - (
Identifier - message
Delimiter - )
Delimiter - {
Identifier - Code
Operator - =
Identifier - code
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - static
Keyword - class
Identifier - PragmaWarning
Delimiter - {
Operator - [
Identifier - Obsolete
Delimiter - (
StringLiteral - "Use NewMethod instead"
Operator - ,
Keyword - false
Delimiter - )
Operator - ]
Keyword - public
Keyword - static
Keyword - void
Identifier - ObsoleteMethod
Delimiter - (
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - NewMethod
Delimiter - (
Delimiter - )
Delimiter - {
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - ObsoleteMethod
Delimiter - (
Delimiter - )
Delimiter - ;
Directive - #pragma warning disable CS0618
Identifier - ObsoleteMethod
Delimiter - (
Delimiter - )
Delimiter - ;
Directive - #pragma warning restore CS0618
Identifier - ObsoleteMethod
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Delimiter - }
Keyword - using
Identifier - System
Delimiter - ;
Keyword - using
Keyword - static
Identifier - System
Operator - .
Identifier - Math
Delimiter - ;
Keyword - namespace
Identifier - Learning
Operator - .
Identifier - More
Operator - .
Identifier - CSharp
Delimiter - {
Keyword - class
Identifier - StaticUsing
Delimiter - {
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "The square root of 4 is {}."
Operator - ,
Identifier - Math
Operator - .
Identifier - Sqrt
Delimiter - (
NumberLiteral - 4
Delimiter - )
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
StringLiteral - "The square root of 4 is {}."
Operator - ,
Identifier - Sqrt
Delimiter - (
NumberLiteral - 4
Delimiter - )
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Delimiter - }
Keyword - using
Identifier - System
Delimiter - ;
Keyword - namespace
Identifier - Csharp7
Delimiter - {
Keyword - class
Identifier - TuplesTest
Delimiter - {
Keyword - public
Delimiter - (
Keyword - string
Operator - ,
Keyword - string
Delimiter - )
Identifier - GetName
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - var
Identifier - names1
Operator - =
Delimiter - (
StringLiteral - "Peter"
Operator - ,
StringLiteral - "Parker"
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - names1
Operator - .
Identifier - Item2
Delimiter - )
Delimiter - ;
Delimiter - (
Keyword - string
Identifier - FirstName
Operator - ,
Keyword - string
Identifier - LastName
Delimiter - )
Identifier - names2
Operator - =
Delimiter - (
StringLiteral - "Peter"
Operator - ,
StringLiteral - "Parker"
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - names3
Operator - =
Delimiter - (
Identifier - First
Operator - :
StringLiteral - "Peter"
Operator - ,
Identifier - Last
Operator - :
StringLiteral - "Parker"
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - names2
Operator - .
Identifier - FirstName
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - names3
Operator - .
Identifier - Last
Delimiter - )
Delimiter - ;
Keyword - return
Identifier - names3
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - string
Identifier - GetLastName
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - var
Identifier - fullName
Operator - =
Identifier - GetName
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - (
Keyword - string
Identifier - firstName
Operator - ,
Keyword - string
Identifier - lastName
Delimiter - )
Operator - =
Identifier - fullName
Delimiter - ;
Identifier - var
Delimiter - (
Identifier - _
Operator - ,
Identifier - last
Delimiter - )
Operator - =
Identifier - fullName
Delimiter - ;
Keyword - return
Identifier - last
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - in
Identifier - t
Identifier - randomNumber
Operator - =
NumberLiteral - 4
Delimiter - ;
Keyword - public
Keyword - in
Identifier - t
Identifier - anotherRandomNumber
Operator - =
NumberLiteral - 10
Delimiter - ;
Keyword - public
Keyword - void
Identifier - Deconstruct
Delimiter - (
Keyword - out
Keyword - in
Identifier - t
Identifier - randomNumber
Operator - ,
Keyword - out
Keyword - in
Identifier - t
Identifier - anotherRandomNumber
Delimiter - )
Delimiter - {
Identifier - randomNumber
Operator - =
Keyword - this
Operator - .
Identifier - randomNumber
Delimiter - ;
Identifier - anotherRandomNumber
Operator - =
Keyword - this
Operator - .
Identifier - anotherRandomNumber
Delimiter - ;
Delimiter - }
Keyword - static
Keyword - void
Identifier - Main
Delimiter - (
Keyword - string
Operator - [
Operator - ]
Identifier - args
Delimiter - )
Delimiter - {
Identifier - var
Identifier - tt
Operator - =
Keyword - new
Identifier - TuplesTest
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - (
Keyword - in
Identifier - t
Identifier - num1
Operator - ,
Keyword - in
Identifier - t
Identifier - num2
Delimiter - )
Operator - =
Identifier - tt
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
TemplateStringLiteral - $"num1: {num1}, num2: {num2}"
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - tt
Operator - .
Identifier - GetLastName
Delimiter - (
Delimiter - )
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - PatternMatchingTest
Delimiter - {
Keyword - public
Keyword - static
Delimiter - (
Keyword - string
Operator - ,
Keyword - in
Identifier - t
Delimiter - )
Operator - ?
Identifier - CreateLogMessage
Delimiter - (
Keyword - object
Identifier - data
Delimiter - )
Delimiter - {
Keyword - switch
Delimiter - (
Identifier - data
Delimiter - )
Delimiter - {
Keyword - case
Identifier - System
Operator - .
Identifier - Net
Operator - .
Identifier - Http
Operator - .
Identifier - HttpRequestException
Identifier - h
Identifier - when
Identifier - h
Operator - .
Identifier - Message
Operator - .
Identifier - Contains
Delimiter - (
StringLiteral - "404"
Delimiter - )
Operator - :
Keyword - return
Delimiter - (
Identifier - h
Operator - .
Identifier - Message
Operator - ,
NumberLiteral - 404
Delimiter - )
Delimiter - ;
Keyword - case
Identifier - System
Operator - .
Identifier - Net
Operator - .
Identifier - Http
Operator - .
Identifier - HttpRequestException
Identifier - h
Identifier - when
Identifier - h
Operator - .
Identifier - Message
Operator - .
Identifier - Contains
Delimiter - (
StringLiteral - "400"
Delimiter - )
Operator - :
Keyword - return
Delimiter - (
Identifier - h
Operator - .
Identifier - Message
Operator - ,
NumberLiteral - 400
Delimiter - )
Delimiter - ;
Keyword - case
Identifier - Exception
Identifier - e
Operator - :
Keyword - return
Delimiter - (
Identifier - e
Operator - .
Identifier - Message
Operator - ,
NumberLiteral - 500
Delimiter - )
Delimiter - ;
Keyword - case
Keyword - string
Identifier - s
Operator - :
Keyword - return
Delimiter - (
Identifier - s
Operator - ,
Identifier - s
Operator - .
Identifier - Contains
Delimiter - (
StringLiteral - "Error"
Delimiter - )
Operator - ?
NumberLiteral - 500
Operator - :
NumberLiteral - 200
Delimiter - )
Delimiter - ;
Keyword - case
Keyword - null
Operator - :
Keyword - return
Keyword - null
Delimiter - ;
Keyword - default
Operator - :
Keyword - return
Delimiter - (
Identifier - data
Operator - .
Identifier - ToString
Delimiter - (
Delimiter - )
Operator - ,
NumberLiteral - 500
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Delimiter - }
Keyword - class
Identifier - RefLocalsTest
Delimiter - {
Keyword - public
Keyword - static
Keyword - ref
Keyword - string
Identifier - FindItem
Delimiter - (
Keyword - string
Operator - [
Operator - ]
Identifier - arr
Operator - ,
Keyword - string
Identifier - el
Delimiter - )
Delimiter - {
Keyword - for
Delimiter - (
Keyword - in
Identifier - t
Identifier - i
Operator - =
NumberLiteral - 0
Delimiter - ;
Identifier - i
Operator - <
Identifier - arr
Operator - .
Identifier - Length
Delimiter - ;
Identifier - i
Operator - ++
Delimiter - )
Delimiter - {
Keyword - if
Delimiter - (
Identifier - arr
Operator - [
Identifier - i
Operator - ]
Operator - ==
Identifier - el
Delimiter - )
Delimiter - {
Keyword - return
Keyword - ref
Identifier - arr
Operator - [
Identifier - i
Operator - ]
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - throw
Keyword - new
Identifier - Exception
Delimiter - (
StringLiteral - "Item not found"
Delimiter - )
Delimiter - ;
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - SomeMethod
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - string
Operator - [
Operator - ]
Identifier - arr
Operator - =
Delimiter - {
StringLiteral - "this"
Operator - ,
StringLiteral - "is"
Operator - ,
StringLiteral - "an"
Operator - ,
StringLiteral - "array"
Delimiter - }
Delimiter - ;
Keyword - ref
Keyword - string
Identifier - item
Operator - =
Keyword - ref
Identifier - FindItem
Delimiter - (
Identifier - arr
Operator - ,
StringLiteral - "array"
Delimiter - )
Delimiter - ;
Identifier - item
Operator - =
StringLiteral - "apple"
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
Identifier - arr
Operator - [
NumberLiteral - 3
Operator - ]
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - class
Identifier - LocalFunctionTest
Delimiter - {
Keyword - private
Keyword - static
Keyword - in
Identifier - t
Identifier - _id
Operator - =
NumberLiteral - 0
Delimiter - ;
Keyword - public
Keyword - in
Identifier - t
Identifier - id
Delimiter - ;
Keyword - public
Identifier - LocalFunctionTest
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - id
Operator - =
Identifier - generateId
Delimiter - (
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - generateId
Delimiter - (
Delimiter - )
Delimiter - {
Keyword - return
Identifier - _id
Operator - ++
Delimiter - ;
Delimiter - }
Delimiter - }
Keyword - public
Keyword - static
Keyword - void
Identifier - AnotherMethod
Delimiter - (
Delimiter - )
Delimiter - {
Identifier - var
Identifier - lf1
Operator - =
Keyword - new
Identifier - LocalFunctionTest
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - var
Identifier - lf2
Operator - =
Keyword - new
Identifier - LocalFunctionTest
Delimiter - (
Delimiter - )
Delimiter - ;
Identifier - Console
Operator - .
Identifier - WriteLine
Delimiter - (
TemplateStringLiteral - $"{lf1.id}, {lf2.id}"
Delimiter - )
Delimiter - ;
Keyword - in
Identifier - t
Identifier - id
Operator - =
Identifier - generateId
Delimiter - (
Delimiter - )
Delimiter - ;
Delimiter - }
Delimiter - }
Delimiter - }
